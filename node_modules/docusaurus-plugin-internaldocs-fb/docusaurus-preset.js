"use strict";
/**
 * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const preset_classic_1 = __importDefault(require("@docusaurus/preset-classic"));
const remark_mdx_filter_imports_1 = __importDefault(require("remark-mdx-filter-imports"));
const internal_1 = require("./internal");
const snippets_1 = __importDefault(require("./lib/remark/snippets"));
const remarkMermaid_1 = require("./theme/DocItem/utils/remarkMermaid");
const cross_repo_snippets_adapter_1 = require("./lib/cross-repo-snippets-adapter");
// Match only paths starting with ./ ../ or @site/ and that have at least one /fb/ dir in the path.
const localFbDirFilePattern = /^(@site|\.+)\/(.*\/)?fb\//;
// This plugin passes through all options to preset-classic.
// But the following options  are specific to this plugin and shouldn't be passed through.
function omitSdocOptions(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
{ staticDocsProject, trackingFile, 'remark-code-snippets': _, enableEditor, experimentalXRepoSnippets, ...rest }) {
    return rest;
}
function preset(context, opts = { docs: {} }) {
    if (opts.docs == null) {
        opts.docs = {};
    }
    if (!opts.docs.remarkPlugins) {
        opts.docs.remarkPlugins = [];
    }
    if (!Array.isArray(opts.docs.remarkPlugins)) {
        throw new Error('Invalid config. docs.remarkPlugins must be an array');
    }
    if (!(0, internal_1.isInternal)()) {
        opts.docs.remarkPlugins.push([remark_mdx_filter_imports_1.default, { strippedFilePattern: localFbDirFilePattern }]);
    }
    if (opts.experimentalXRepoSnippets) {
        opts.docs.remarkPlugins.push([snippets_1.default, { ...opts.experimentalXRepoSnippets, fileSnippetProvider: cross_repo_snippets_adapter_1.snippetContentProvider }]);
    }
    else {
        opts.docs.remarkPlugins.push([snippets_1.default, { ...opts['remark-code-snippets'] }]);
    }
    opts.docs.remarkPlugins.push([remarkMermaid_1.remarkMermaid, { version: 'v1' }]);
    const classicOptions = omitSdocOptions(opts);
    const result = (0, preset_classic_1.default)(context, classicOptions);
    result.themes.push([require.resolve('.'), opts]);
    return result;
}
exports.default = preset;
