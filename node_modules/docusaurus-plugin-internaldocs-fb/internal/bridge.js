"use strict";
/**
 * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.
 *
 * @format
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.call = void 0;
let isInitialised = false;
let globalId = 0;
const promises = {};
const STATIC_DOCS_HOSTS = [
    // Legacy SWIFT based corpnet host
    'staticdocs.thefacebook.com',
    // Localhost when developing a site locally (staticdocslocal)
    'localhost',
];
// Production staticdocs.internalfb.com host
// and ondemand hosts like staticdocs.10866.od.internalfb.com
const STATIC_DOCS_HOST_SUFFIX = '.internalfb.com';
function init() {
    if (isInitialised) {
        return;
    }
    isInitialised = true;
    window.addEventListener('message', event => {
        if (event.data.event !== 'static-docs-bridge-response') {
            return;
        }
        const id = event.data.id;
        if (!(id in promises)) {
            console.error(`Recieved response for id: ${id} with no matching receiver`);
        }
        if ('response' in event.data) {
            promises[id].resolve(event.data.response);
        }
        else {
            promises[id].reject(new Error(event.data.error));
        }
        delete promises[id];
    });
}
// keep this in top level to be evaluated during page startup
// and before javascript redirects
const PARENT_HOSTNAME = (typeof window !== 'undefined' &&
    new URL(window.location.href).searchParams.get('parentHostname')) ||
    'https://www.internalfb.com';
/**
 * Keep all uses of this function inside this package for maintenance reasons.
 * The apis need to be kept in sync with the server.
 */
function call(params) {
    // This is to help with debugging, for example if in OSS, we can't use the bridge, so error early.
    if (!STATIC_DOCS_HOSTS.includes(window.location.hostname) &&
        !window.location.hostname.endsWith(STATIC_DOCS_HOST_SUFFIX)) {
        return Promise.reject(new Error('Not running on static docs'));
    }
    init();
    const id = globalId++;
    const promise = new Promise((resolve, reject) => {
        promises[id] = { resolve, reject };
    });
    const message = {
        event: 'static-docs-bridge-call',
        id: id,
        module: params.module,
        api: params.api,
        args: params.args,
    };
    const target = window.location.hostname === 'localhost' ? '*' : PARENT_HOSTNAME;
    window.parent.postMessage(message, target);
    return promise;
}
exports.call = call;
