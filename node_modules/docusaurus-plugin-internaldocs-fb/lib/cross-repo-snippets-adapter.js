"use strict";
/**
 * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.snippetContentProvider = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const snippets_1 = require("./remark/snippets");
const cross_repo_snippets_1 = require("./cross-repo-snippets");
const cache_file_1 = require("./cache-file");
const usedSnippets = [];
async function snippetContentProvider({ baseDir, file, repo, start, end }) {
    if (typeof repo !== 'string') {
        return fs_1.default.promises
            .readFile(path_1.default.resolve(baseDir, file))
            .then(x => x.toString())
            .then(x => (0, snippets_1.getSnippet)(x, { start, end, file }));
    }
    return (0, cross_repo_snippets_1.getFileContent)(repo, file).then(content => {
        const snippetContent = (0, snippets_1.getSnippet)(content, { start, end, file });
        usedSnippets.push({ file, repo, start, end, content: snippetContent });
        return snippetContent;
    }).catch(e => {
        const cachedSnippet = cache_file_1.cacheFile.getSnippet({ file, repo, start, end });
        if (cachedSnippet) {
            usedSnippets.push({ file, repo, start, end, content: cachedSnippet });
            return cachedSnippet;
        }
        throw e;
    });
}
exports.snippetContentProvider = snippetContentProvider;
// before node exists we have to sync used snippets with cache file
// functionhastobesync
const syncCacheFile = () => cache_file_1.cacheFile.syncCacheFile({ usedSnippets });
process.on('exit', syncCacheFile);
process.on('SIGINT', syncCacheFile);
process.on('SIGUSR1', syncCacheFile);
process.on('SIGUSR2', syncCacheFile);
