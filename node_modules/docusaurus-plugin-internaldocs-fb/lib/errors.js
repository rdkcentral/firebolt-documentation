"use strict";
/**
 * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.
 *
 * @emails oncall+static_docs@fb.com
 * @format
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OfflineError = exports.UnauthenticatedError = exports.InvalidReferenceError = exports.StaticDocsError = void 0;
class StaticDocsError extends Error {
}
exports.StaticDocsError = StaticDocsError;
/**
 * Thrown when a code-snippet reference is known to be invalid.
 * This may be because the author has mis-spelt the filename for example
 * but may also be because the destination file no longer exists.
 *
 * For this reason, if a previously cached value of the snippet is known,
 * it should be used as a fallback to prevent breaking produciton builds.
 *
 * If no previous version of the snippet is known, then the build should be failed,
 * as it must be a new (and invalid) snippet.
 */
class InvalidReferenceError extends StaticDocsError {
}
exports.InvalidReferenceError = InvalidReferenceError;
/**
 * Thrown when no valid auth token is present.
 *
 * To allow for offline / convenient use, fallback to previously cached values
 * of the requested resource when available, only failing the build when
 * there is no alternative.
 */
class UnauthenticatedError extends StaticDocsError {
}
exports.UnauthenticatedError = UnauthenticatedError;
/**
 * Thrown when intern can't be reached.
 *
 * To allow for offline / convenient use, fallback to previously cached values
 * of the requested resource when available, only failing the build when
 * there is no alternative.
 */
class OfflineError extends StaticDocsError {
}
exports.OfflineError = OfflineError;
