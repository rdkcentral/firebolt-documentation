"use strict";
/**
 * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.
 *
 * @format
 * @ts-check
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ExecutionEnvironment_1 = __importDefault(require("@docusaurus/ExecutionEnvironment"));
const internal_1 = require("./internal");
const INITIAL_SLASH = /^\//;
const TRAILING_SLASH = /\/$/;
const LOCAL_STORAGE_AUTO_REDIRECT_KEY = '__internaldocs_auto_redirect';
const STATIC_DOMAIN_NAME = 'thefacebook.com';
const STATICDOCS_DOMAIN_NAME = `staticdocs.${STATIC_DOMAIN_NAME}`;
const INTERN_DOMAIN_NAME = 'internalfb.com';
const STATICDOCS_INTERN_PATH = '/intern/staticdocs';
const CHECK_URL = 'https://www.internalfb.com/intern/internaldocs/check';
const NETWORK_TEST_URL = 'https://staticdocs.thefacebook.com/ping';
const DISABLE_REDIRECT_PARAM = 'disableRedirect';
const TAG = '[docusaurus-plugin-internaldocs-fb]';
function hasQueryValue(key) {
    const value = new URLSearchParams(window.location.search).get(key);
    console.log(`query "${key}": ${value}`);
    return value !== null;
}
exports.default = (function () {
    // This function is called by both
    // - this plugin with `window.location`
    // - docusaurus with `import('history').Location`
    // both have `pathname: string` that we use.
    //
    // Rest fields remain the same as docusaurus only does sitewide routing
    // so hostname/port/protocol etc will remain the same
    function __internaldocs_set_redirect(notNecessarilyWindowLocation) {
        // do not do anything on new origin
        // everything will happen serverside
        if (window.location.hostname.endsWith(INTERN_DOMAIN_NAME)) {
            return;
        }
        if (window.top == window.self && // if current page is not in iframe
            window.location.hostname.endsWith(`.${STATIC_DOMAIN_NAME}`) &&
            !hasQueryValue(DISABLE_REDIRECT_PARAM)) {
            const newUrl = new URL(window.location.href);
            newUrl.hostname = INTERN_DOMAIN_NAME;
            newUrl.port = '';
            if (window.location.hostname === STATICDOCS_DOMAIN_NAME) {
                newUrl.pathname =
                    STATICDOCS_INTERN_PATH + notNecessarilyWindowLocation.pathname;
            }
            else {
                newUrl.pathname =
                    STATICDOCS_INTERN_PATH +
                        window.location.hostname.split('.')[0] +
                        notNecessarilyWindowLocation.pathname;
            }
            console.log(`${TAG} Redirecting to ${newUrl.href}`);
            window.location.href = newUrl.href;
            return;
        }
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), 2000);
        fetch(NETWORK_TEST_URL, { signal: controller.signal })
            .then(() => {
            clearTimeout(timeout);
            fetch(CHECK_URL, {
                credentials: 'include',
                referrerPolicy: 'no-referrer-when-downgrade',
            })
                .then(r => r.json())
                .then(response => handleCheckResponse(response))
                .catch(() => {
                // Can reach static docs but not intern.
            });
        })
            .catch(() => {
            // Can't reach static docs host. Do nothing.
        });
    }
    function handleCheckResponse(response) {
        if (!response.showBanner || !response.redirectTo || !response.template) {
            return;
        }
        const banner = document.getElementById('internaldocs-banner');
        if (banner) {
            const currentUrl = location.href;
            const currentHost = new URL(currentUrl).host;
            const currentPathAndEverythingAfter = currentUrl.slice(currentUrl.indexOf(currentHost) + currentHost.length);
            const url = response.redirectTo.replace(TRAILING_SLASH, '') +
                '/' +
                (currentPathAndEverythingAfter
                    ? currentPathAndEverythingAfter.replace(INITIAL_SLASH, '')
                    : '');
            if (hasQueryValue(DISABLE_REDIRECT_PARAM)) {
                console.log(`${TAG}  Disabling redirect because of query parameter`);
                setRedirectEnabled(false);
            }
            if (response.autoRedirectEnabled && isRedirectEnabled()) {
                console.log(`${TAG}  Redirecting to ${url}`);
                window.location.href = url;
            }
            updateBanner(banner, response.template, url, response.autoRedirectEnabled);
        }
    }
    function updateBanner(bannerElement, template, redirectDestination, isAutoRedirectEnabled) {
        // template is expected to be of the form 'something something {{label}} something'
        const matches = template.match(/(.*)\{\{([^}]+)\}\}(.*)/);
        if (!matches) {
            return;
        }
        const before = matches[1] || '';
        const linkText = matches[2] || '';
        const after = matches[3] || '';
        Array.from(bannerElement.childNodes).map(node => bannerElement.removeChild(node));
        bannerElement.appendChild(document.createTextNode(before));
        const linkElement = document.createElement('a');
        linkElement.href = redirectDestination;
        linkElement.style.color = '#3578e5';
        linkElement.appendChild(document.createTextNode(linkText));
        bannerElement.appendChild(linkElement);
        bannerElement.appendChild(document.createTextNode(after));
        const rememberParagraph = document.createElement('p');
        rememberParagraph.style.fontSize = '11px';
        rememberParagraph.style.marginBottom = '3px';
        const checkbox = document.createElement('input');
        checkbox.id = 'internaldocs-remember-checkbox';
        checkbox.type = 'checkbox';
        checkbox.style.height = '8px';
        checkbox.checked = isRedirectEnabled();
        checkbox.addEventListener('change', () => {
            setRedirectEnabled(Boolean(checkbox.checked));
        });
        rememberParagraph.appendChild(checkbox);
        if (isAutoRedirectEnabled) {
            bannerElement.appendChild(rememberParagraph);
        }
        const label = document.createElement('label');
        label.htmlFor = 'internaldocs-remember-checkbox';
        label.appendChild(document.createTextNode('Redirect me automatically in future'));
        rememberParagraph.appendChild(label);
        bannerElement.style.display = 'block';
    }
    function sendPageUpdate() {
        // Page title can be updated after the routeUpdate event.
        // So wait for the next idle slot.
        setTimeout(() => {
            var _a;
            (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({
                event: 'page-update',
                title: document.title,
                location: window.location.href,
                // Version is used by WWW to know which plugin is on a page.
                // When bumping it, you probably want to do it in WWW too
                // e.g https://www.internalfb.com/intern/diff/D22253861/
                version: 2,
            }, '*');
        }, 0);
    }
    function isRedirectEnabled() {
        const setting = localStorage.getItem(LOCAL_STORAGE_AUTO_REDIRECT_KEY);
        if (setting === 'true') {
            console.log(`${TAG} opted in to auto redirects`);
            return true;
        }
        if (setting === 'false') {
            console.log(`${TAG} opted out of auto redirects`);
            return false;
        }
        console.log(`${TAG} using default auto-redirect behaviour: true`);
        return true;
    }
    function setRedirectEnabled(shouldRedirect) {
        localStorage.setItem(LOCAL_STORAGE_AUTO_REDIRECT_KEY, shouldRedirect ? 'true' : 'false');
    }
    if (ExecutionEnvironment_1.default.canUseDOM) {
        __internaldocs_set_redirect(window.location);
        sendPageUpdate();
        window['__internaldocs_mock_check_response'] = handleCheckResponse;
        document.addEventListener('copy', () => {
            const selection = document.getSelection();
            if (!selection) {
                return;
            }
            internal_1.feedback.reportContentCopied({
                textContent: selection.toString(),
            });
        });
    }
    const mod = {
        onRouteUpdate: ({ location }) => {
            __internaldocs_set_redirect(location);
            sendPageUpdate();
        },
    };
    return mod;
})();
