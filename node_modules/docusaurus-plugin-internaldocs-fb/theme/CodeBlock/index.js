"use strict";
/**
 * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.
 *
 * @format
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const CodeBlock_1 = __importDefault(require("@theme-init/CodeBlock"));
const useDocusaurusContext_1 = __importDefault(require("@docusaurus/useDocusaurusContext"));
const useIsBrowser_1 = __importDefault(require("@docusaurus/useIsBrowser"));
const internal_1 = require("../../internal");
const vs_code_icon_1 = __importDefault(require("./vs-code-icon"));
const android_studio_icon_1 = __importDefault(require("./android-studio-icon"));
const styles_module_css_1 = __importDefault(require("./styles.module.css"));
const repos = [
    {
        names: ['fbsource', 'fbs'],
        project: 'fbsource',
        canonicalName: 'fbsource',
    },
    {
        names: ['www'],
        project: 'facebook-www',
        canonicalName: 'www',
    },
];
function SafeCodeBlock(props) {
    try {
        return (0, CodeBlock_1.default)(props);
    }
    catch (e) {
        return (react_1.default.createElement("p", { style: { color: 'red', fontWeight: 'bold' } }, "Could not render codeblock"));
    }
}
const CodeBlock = (props) => {
    const { siteConfig } = (0, useDocusaurusContext_1.default)();
    const isBrowser = (0, useIsBrowser_1.default)();
    // Empty codeblocks/x-repo-snippets throw for in-page editor, this prevents it
    const basicCodeBlock = SafeCodeBlock(Object.assign({ children: '' }, props));
    if (!isBrowser) {
        // This component uses DOM APIs (e.g. URL) so when building server side, just render the basic version.
        return basicCodeBlock;
    }
    if (typeof props.file !== 'string') {
        return basicCodeBlock;
    }
    let filePath;
    let browserUrl;
    let vsCodeUrl;
    let androidStudioUrl;
    if ((0, internal_1.isInternal)()) {
        if (!siteConfig.customFields) {
            return basicCodeBlock;
        }
        const { fbRepoName, ossRepoPath } = siteConfig.customFields;
        if (typeof fbRepoName !== 'string') {
            return basicCodeBlock;
        }
        filePath =
            typeof ossRepoPath === 'string' && typeof props.repo !== 'string'
                ? concatPaths(ossRepoPath, props.file)
                : props.file;
        const repo = repos.find(r => { var _a; return r.names.includes(((_a = props.repo) !== null && _a !== void 0 ? _a : fbRepoName).toLowerCase()); });
        if (repo === undefined) {
            return basicCodeBlock;
        }
        browserUrl = codehubUrl(repo, filePath);
        vsCodeUrl = openInVsCodeUrl(repo, filePath);
        androidStudioUrl = openInAndroidStudioUrl(repo, filePath);
    }
    else {
        if (typeof siteConfig.organizationName !== 'string' ||
            typeof siteConfig.projectName !== 'string') {
            return basicCodeBlock;
        }
        filePath = props.file;
        browserUrl = githubUrl(siteConfig.organizationName, siteConfig.projectName, props.file);
        // Never show "Open in VSCode" on OSS sites.
        vsCodeUrl = null;
        androidStudioUrl = null;
    }
    const fileParts = filePath.split('/');
    const fileName = fileParts[fileParts.length - 1];
    return (react_1.default.createElement("div", null,
        react_1.default.createElement("a", { href: browserUrl, title: "Browse entire file", target: "_blank", rel: "noreferrer", onClick: () => internal_1.feedback.reportFeatureUsage({
                featureName: 'browse-file',
                id: filePath,
            }), className: styles_module_css_1.default.CodeBlockFilenameTab }, fileName),
        vsCodeUrl !== null ? (react_1.default.createElement("a", { target: "_blank", rel: "noreferrer", href: vsCodeUrl, onClick: () => internal_1.feedback.reportFeatureUsage({
                featureName: 'open-in-vscode',
                id: filePath,
            }) },
            react_1.default.createElement("img", { style: { padding: '0 6px', height: '16px' }, title: "Open in VSCode @ FB", src: vs_code_icon_1.default }))) : null,
        androidStudioUrl !== null ? (react_1.default.createElement("a", { target: "_blank", rel: "noreferrer", href: androidStudioUrl, onClick: () => internal_1.feedback.reportFeatureUsage({
                featureName: 'open-in-android-studio',
                id: filePath,
            }) },
            react_1.default.createElement("img", { style: { padding: '0 6px', height: '16px' }, title: "Open in Android Studio", src: android_studio_icon_1.default }))) : null,
        basicCodeBlock));
};
function openInVsCodeUrl(repo, file) {
    const url = new URL('https://www.internalfb.com/intern/nuclide/open/arc');
    url.searchParams.append('project', repo.project);
    url.searchParams.append('paths[0]', file);
    return url.toString();
}
function openInAndroidStudioUrl(repo, file) {
    if (repo.canonicalName !== 'fbsource' || !file.startsWith('fbandroid')) {
        return null;
    }
    const url = new URL('fb-ide-opener://open');
    url.searchParams.append('ide', 'intellij');
    url.searchParams.append('filepath', `/fbsource/${file}`);
    return url.toString();
}
function codehubUrl(repo, file) {
    const url = new URL('https://www.internalfb.com');
    url.pathname = `/code/${repo.canonicalName}/${file}`;
    return url.toString();
}
function githubUrl(organisation, project, file) {
    const url = new URL('https://github.com');
    url.pathname = `/${organisation}/${project}/blob/master/${file}`;
    return url.toString();
}
function concatPaths(...args) {
    return args
        .map(x => (x.startsWith('/') ? x.slice(1) : x))
        .map(x => (x.endsWith('/') ? x.slice(0, x.length - 1) : x))
        .join('/');
}
exports.default = CodeBlock;
