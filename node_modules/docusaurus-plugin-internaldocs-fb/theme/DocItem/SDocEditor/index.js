"use strict";
/**
 * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.
 *
 * @format
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDocEditor = void 0;
const react_1 = __importStar(require("react"));
const Link_1 = __importDefault(require("@docusaurus/Link"));
const Translate_1 = __importDefault(require("@docusaurus/Translate"));
const useBaseUrl_1 = __importDefault(require("@docusaurus/useBaseUrl"));
const Tabs_1 = __importDefault(require("@theme/Tabs"));
const TabItem_1 = __importDefault(require("@theme/TabItem"));
const react_live_1 = require("react-live");
const react_2 = require("@mdx-js/react");
const MDXComponents_1 = __importDefault(require("../../MDXComponents"));
const inpageeditor_1 = require("../../../internal/inpageeditor");
const Button_1 = require("../Button");
const mdxToReactString_1 = require("../utils/mdxToReactString");
const styles_module_css_1 = __importDefault(require("./styles.module.css"));
const safeStringifyJson = (input) => {
    try {
        return JSON.stringify(input);
    }
    catch (e) {
        console.warn('Could not stringify props for UnknownComponent', input);
        return 'Could not stringify';
    }
};
const getPreviewScopeComponents = (importedItems) => ({
    ...MDXComponents_1.default,
    MDXProvider: react_2.MDXProvider,
    Link: Link_1.default,
    Translate: Translate_1.default,
    Tabs: Tabs_1.default,
    TabItem: TabItem_1.default,
    __unknownComponent(name) {
        return function UnknownComponent(props) {
            const isImported = name in importedItems;
            /**
             * This should've been done using spread syntax
             * but it currently breaks our plugin
             */
            const nonChildrenProps = react_1.default.useMemo(() => Object.keys(props).reduce((acc, k) => {
                if (k !== 'children')
                    acc[k] = props[k];
                return acc;
            }, {}), [props]);
            return (react_1.default.createElement("div", { className: styles_module_css_1.default.unknown_component },
                isImported && (react_1.default.createElement("p", null, "Live preview does not support imported components")),
                react_1.default.createElement("p", { style: { marginBottom: 4 } },
                    isImported ? 'Imported' : 'Unknown',
                    " component",
                    ' ',
                    react_1.default.createElement("b", null,
                        react_1.default.createElement("code", null, name)),
                    ' ',
                    "with props ",
                    react_1.default.createElement("code", null, safeStringifyJson(nonChildrenProps))),
                !isImported && (react_1.default.createElement("details", null,
                    react_1.default.createElement("summary", null, "Why did it not render?"),
                    "Editor cannot render it due to the component being custom or nondefined")),
                props.children ? (react_1.default.createElement("div", { className: styles_module_css_1.default.unknown_component_children }, props.children)) : null));
        };
    },
});
function SDocEditor({ onEditorSubmit, handleCloseEditor, pageRawContent, setPageRawContentVersion, isSubmitting, diffKind, newFilePath, }) {
    const [transformFailed, setTransformFailed] = (0, react_1.useState)(false);
    const [importedComponents, setImportedComponets] = (0, react_1.useState)({});
    const previewComponents = react_1.default.useMemo(() => getPreviewScopeComponents(importedComponents), [importedComponents]);
    const handleEditorSubmit = (0, react_1.useCallback)(event => {
        event.preventDefault();
        onEditorSubmit();
    }, [onEditorSubmit]);
    const transformCodeToMDX = (0, react_1.useCallback)((src) => {
        const transpiledMDX = (0, mdxToReactString_1.mdxToReactString)(src);
        if (transpiledMDX.code === null) {
            setTransformFailed(true);
            return '';
        }
        setTransformFailed(false);
        // comparison of two objects by keys
        const currentItemsJoined = Object.keys(importedComponents).join(',');
        const newItemsJoined = Object.keys(transpiledMDX.importedComponents).join(',');
        if (currentItemsJoined !== newItemsJoined) {
            setImportedComponets(transpiledMDX.importedComponents);
        }
        // end
        return `
      ${transpiledMDX.code}
      render(
        <MDXProvider components={components}>
          <MDXContent components={components} />
        </MDXProvider>
      )
    `;
    }, [setTransformFailed, importedComponents]);
    const handleCodeChange = (0, react_1.useCallback)((code) => {
        setPageRawContentVersion({
            pageRawContent: code,
            timestamp: Date.now().toString(),
            diffKind,
            newFilePath,
        });
    }, [setPageRawContentVersion, diffKind, newFilePath]);
    if (pageRawContent === null)
        return null;
    const filename = newFilePath.split('/').pop();
    if (filename === undefined) {
        throw new Error(`Could not extract filename from "${newFilePath}"`);
    }
    return (react_1.default.createElement(react_live_1.LiveProvider, { code: pageRawContent, noInline: true, scope: {
            components: previewComponents,
            MDXProvider: react_2.MDXProvider,
            mdx: react_2.mdx,
            useBaseUrl: useBaseUrl_1.default,
        }, transformCode: transformCodeToMDX },
        react_1.default.createElement("form", { onSubmit: handleEditorSubmit, className: styles_module_css_1.default.editor },
            react_1.default.createElement(EditorHeader, { isSubmitDisabled: isSubmitting, onCancel: handleCloseEditor, diffKind: diffKind, filename: filename }),
            react_1.default.createElement("div", { className: styles_module_css_1.default.editor_input },
                react_1.default.createElement(react_live_1.LiveEditor, { className: styles_module_css_1.default.live_editor, onChange: handleCodeChange })),
            react_1.default.createElement("div", { className: styles_module_css_1.default.editor_preview },
                transformFailed ? (react_1.default.createElement(PreviewFailedNote, null)) : (react_1.default.createElement(react_live_1.LivePreview, { className: styles_module_css_1.default.live_preview })),
                react_1.default.createElement(react_live_1.LiveError, { className: styles_module_css_1.default.live_error })))));
}
exports.SDocEditor = SDocEditor;
function EditorHeader({ onCancel, isSubmitDisabled, diffKind, filename, }) {
    return (react_1.default.createElement("div", { className: styles_module_css_1.default.editor_header },
        react_1.default.createElement("span", null,
            react_1.default.createElement("h2", { style: { margin: 0 } }, "Staticdocs editor"),
            diffKind === inpageeditor_1.DiffKind.add
                ? `Add content for a new file ${filename}`
                : `Edit existing ${filename}`),
        react_1.default.createElement("div", { className: styles_module_css_1.default.cta_wrapper },
            react_1.default.createElement(Button_1.Button, { onClick: onCancel }, "Cancel"),
            react_1.default.createElement(Button_1.Button, { type: "submit", disabled: isSubmitDisabled }, "Publish Diff"))));
}
function PreviewFailedNote() {
    return (react_1.default.createElement("div", { className: styles_module_css_1.default.show_info },
        react_1.default.createElement("h3", null, "Note"),
        react_1.default.createElement("p", null,
            "The Live preview fails to render. ",
            react_1.default.createElement("br", null),
            "This might be because we currently do not have support for the operation being performed on the page e.g code-snippets. Please ignore this",
            ' ',
            react_1.default.createElement("b", null, "if you are sure"),
            " it is the case and continue with the editor.",
            ' ',
            react_1.default.createElement("b", null, "Happy Editing!"))));
}
