"use strict";
/**
 * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.
 *
 * @format
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateHash = exports.getFilePathRelativeToDocsFolder = exports.getFilePathRelativeToRepoRoot = void 0;
function getFilePathRelativeToRepoRoot(url) {
    /*
      Expected url forms:
        https://www.internalfb.com/intern/diffusion/FBS/browse/master/...
        https://www.internalfb.com/code/fbsource/...
     */
    const path = new URL(url).pathname;
    let filePathOffset;
    if (path.startsWith('/intern/diffusion/')) {
        filePathOffset = 6;
    }
    else if (path.startsWith('/code/')) {
        filePathOffset = 3;
    }
    else {
        console.warn(`Unexpected editUrl format for in-page editor: ${url}`);
        return null;
    }
    const splittedPathUrl = path.split('/');
    if (splittedPathUrl.length <= filePathOffset ||
        splittedPathUrl[splittedPathUrl.length - 1] == '') {
        return null;
    }
    const fileRootPath = path.split('/').slice(filePathOffset).join('/');
    return fileRootPath;
}
exports.getFilePathRelativeToRepoRoot = getFilePathRelativeToRepoRoot;
function getFilePathRelativeToDocsFolder(url, docsDir) {
    const fileRootPath = getFilePathRelativeToRepoRoot(url);
    if (!fileRootPath) {
        return null;
    }
    const splittedDocsDir = docsDir.split('/');
    for (let i = 0; i < splittedDocsDir.length; i++) {
        const currentDocDir = splittedDocsDir.slice(i).join('/');
        if (fileRootPath.startsWith(currentDocDir)) {
            return fileRootPath.slice(currentDocDir.length + 1);
        }
    }
    return null;
}
exports.getFilePathRelativeToDocsFolder = getFilePathRelativeToDocsFolder;
function generateHash(str) {
    let hash = 0, i, chr;
    if (str.length === 0)
        return hash.toString();
    for (i = 0; i < str.length; i++) {
        chr = str.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return hash.toString();
}
exports.generateHash = generateHash;
