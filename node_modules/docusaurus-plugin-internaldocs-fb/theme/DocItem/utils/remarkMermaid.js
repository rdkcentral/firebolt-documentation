"use strict";
/**
 * (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.remarkMermaid = void 0;
function isMermaidCodeBlock(x) {
    return x.type === 'code' && x.lang === 'mermaid';
}
// This file is poorly typed(any)
// - to avoid pulling types from remark(not complete)
// - to avoid complexity for ESM tests package with symlinks and dependencies
function v1Transformer(root) {
    root.children = root.children.map((x) => {
        if (isMermaidCodeBlock(x)) {
            const mermaidJsxNode = {
                type: 'jsx',
                value: [
                    '<Mermaid chart={`',
                    x.value,
                    '`} />',
                ].join('\n'),
                position: {
                    ...x.position,
                    indent: [1, 1, 1],
                },
            };
            return mermaidJsxNode;
        }
        return x;
    });
}
function v2Transformer(root) {
    root.children = root.children.map((x) => {
        if (isMermaidCodeBlock(x)) {
            const loc = {
                start: { line: x.position.start.line, column: x.position.start.column },
                end: { line: x.position.end.line, column: x.position.end.column },
            };
            const start = x.position.start.offset;
            const end = x.position.end.offset;
            const range = [start, end];
            const mermaidJsxNode = {
                type: 'mdxJsxFlowElement',
                name: 'Mermaid',
                data: { _xdmExplicitJsx: true },
                children: [],
                meta: null,
                attributes: [{
                        type: 'mdxJsxAttribute',
                        name: 'chart',
                        value: {
                            type: 'mdxJsxAttributeValueExpression',
                            value: ['`\n', x.value, '`'].join('\n'),
                            data: {
                                estree: {
                                    body: [{
                                            type: "ExpressionStatement",
                                            start,
                                            range,
                                            loc,
                                            expression: {
                                                loc,
                                                range,
                                                start,
                                                end,
                                                type: "Literal",
                                                value: x.value,
                                                raw: ['`\n', x.value, '`'].join('\n'),
                                            },
                                        }],
                                    comments: [],
                                    end,
                                    loc,
                                    range,
                                    sourceType: "module",
                                    start,
                                    type: "Program",
                                },
                            },
                        },
                        position: x.position,
                    }],
            };
            return mermaidJsxNode;
        }
        return x;
    });
}
;
/**
 * This plugin has to work with remark AST v1 and v2
 * v1 is used by docusaurus during build time with @mdx-js v1
 * v1 is used by in-page editor by XDM or later by @mdx-js v2
 */
function remarkMermaid(options) {
    return (options === null || options === void 0 ? void 0 : options.version) === 'v1'
        ? v1Transformer
        : v2Transformer;
}
exports.remarkMermaid = remarkMermaid;
;
