"use strict";
/**
 * (c) Facebook, Inc. and its affiliates. Confidential and proprietary.
 *
 * @format
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.call = void 0;
let isInitialised = false;
let globalId = 0;
const promises = {};
function init() {
    if (isInitialised) {
        return;
    }
    isInitialised = true;
    window.addEventListener('message', event => {
        if (event.data.event !== 'static-docs-bridge-response') {
            return;
        }
        const id = event.data.id;
        if (!(id in promises)) {
            console.error(`Recieved response for id: ${id} with no matching receiver`);
        }
        if ('response' in event.data) {
            promises[id].resolve(event.data.response);
        }
        else {
            promises[id].reject(new Error(event.data.error));
        }
        delete promises[id];
    });
}
/**
 * Keep all uses of this function inside this package for maintenance reasons.
 * The apis need to be kept in sync with the server.
 */
function call(params) {
    return __awaiter(this, void 0, void 0, function* () {
        if (window.location.hostname !== 'staticdocs.thefacebook.com' &&
            window.location.hostname !== 'localhost') {
            return Promise.reject(new Error('Not running on static docs'));
        }
        init();
        const id = globalId++;
        const promise = new Promise((resolve, reject) => {
            promises[id] = { resolve, reject };
        });
        const message = {
            event: 'static-docs-bridge-call',
            id: id,
            module: params.module,
            api: params.api,
            args: params.args,
        };
        const target = window.location.hostname === 'localhost'
            ? '*'
            : 'https://www.internalfb.com';
        window.parent.postMessage(message, target);
        return promise;
    });
}
exports.call = call;
