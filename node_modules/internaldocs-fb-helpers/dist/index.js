"use strict";
/**
 * (c) Facebook, Inc. and its affiliates. Confidential and proprietary.
 *
 * @format
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OssOnly = exports.FbInternalOnly = exports.getEphemeralDiffNumber = exports.hasEphemeralDiffNumber = exports.isInternal = exports.validateFbContentArgs = exports.fbInternalOnly = exports.fbContent = exports.inpageeditor = exports.feedback = exports.uidocs = exports.bloks = void 0;
exports.bloks = __importStar(require("./bloks"));
exports.uidocs = __importStar(require("./uidocs"));
exports.feedback = __importStar(require("./feedback"));
exports.inpageeditor = __importStar(require("./inpageeditor"));
const FB_CONTENT_ARG_KEYS = ['internal', 'external'];
/*
 * Accepts arguments of the form:
    {
      internal: 'private content',
      external: 'public content',
    }
 * Returns the internal value when building the internal site.
 * and the external value when building the public site.
 *
 * If only one key is provided, the other defaults to []
 */
function fbContent(args) {
    validateFbContentArgs(args);
    if (isInternal()) {
        return 'internal' in args ? callIfFunction(args.internal) : [];
    }
    else {
        return 'external' in args ? callIfFunction(args.external) : [];
    }
}
exports.fbContent = fbContent;
/*
 * Shortcut for using fbContent when you don't need to specify any external content.
 * Returns it's argument when building the internal site.
 * Returns [] when building a public site.
 */
function fbInternalOnly(internalContent) {
    return fbContent({ internal: internalContent });
}
exports.fbInternalOnly = fbInternalOnly;
function callIfFunction(arg) {
    if (typeof arg === 'function') {
        return arg();
    }
    return arg;
}
function validateFbContentArgs(args) {
    if (typeof args !== 'object') {
        throw new Error(`fbContent() args must be an object containing keys: ${FB_CONTENT_ARG_KEYS}. Instead got ${args}`);
    }
    const containsValidArg = Object.keys(args).find(arg => FB_CONTENT_ARG_KEYS.find(key => key === arg));
    if (!containsValidArg) {
        throw new Error(`No valid args found in ${JSON.stringify(args)}. Accepted keys: ${FB_CONTENT_ARG_KEYS}`);
    }
    const invalidArgs = Object.keys(args).filter(arg => !FB_CONTENT_ARG_KEYS.find(key => key === arg));
    if (invalidArgs.length > 0) {
        throw new Error(`Unexpected keys ${invalidArgs} found in fbContent() args. Accepted keys: ${FB_CONTENT_ARG_KEYS}`);
    }
}
exports.validateFbContentArgs = validateFbContentArgs;
function isInternal() {
    // To use this in front-end code, we're relying on docusaurus-plugin-internaldocs-fb to add this value to the webpack env plugins.
    try {
        return Boolean(process.env.FB_INTERNAL);
    }
    catch (e) {
        console.log("process.env.FB_INTERNAL couldn't be read, maybe you forgot to add the required webpack EnvironmentPlugin config?", e);
        return false;
    }
}
exports.isInternal = isInternal;
function hasEphemeralDiffNumber() {
    return Boolean(getEphemeralDiffNumber());
}
exports.hasEphemeralDiffNumber = hasEphemeralDiffNumber;
function getEphemeralDiffNumber() {
    // To use this in front-end code, we're relying on docusaurus-plugin-internaldocs-fb to add this value to the webpack env plugins.
    try {
        if (process.env.PHABRICATOR_DIFF_NUMBER) {
            return process.env.PHABRICATOR_DIFF_NUMBER;
        }
        else {
            return null;
        }
    }
    catch (e) {
        console.log("process.env.PHABRICATOR_DIFF_NUMBER couldn't be read, maybe you forgot to add the required webpack EnvironmentPlugin config?", e);
        return null;
    }
}
exports.getEphemeralDiffNumber = getEphemeralDiffNumber;
/*
 * React component for wrapping content that should only be rendered on the internal (facebook empoyee-facing) website.
 *
 * Note: Anything inlined here will still be visible in the public source code, so to include confidential content,
 * put it inside an .mdx file in a ./fb folder (this folder won't be synced out to GitHub), and then import it as a JSX component like so:
 *
 * import MySecretInfo from './fb/MySecretInfo.mdx'
 *
 * <FbInternalOnly>
 * <MySecretInfo/>
 * </FbInternalOnly>
 */
function FbInternalOnly(props) {
    if (isInternal()) {
        return props.children;
    }
    return null;
}
exports.FbInternalOnly = FbInternalOnly;
/*
 * React component for wrapping content that should only be rendered on the external (public-facing) website.
 */
function OssOnly(props) {
    if (!isInternal()) {
        return props.children;
    }
    return null;
}
exports.OssOnly = OssOnly;
